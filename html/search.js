window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "AirPlainCompanyInfoWidget", "modulename": "AirPlainCompanyInfoWidget", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "AirPlainCompanyInfoWidget.AirPlainCompanyInfoWidget", "modulename": "AirPlainCompanyInfoWidget", "qualname": "AirPlainCompanyInfoWidget", "kind": "class", "doc": "<p>Cr\u00e9ation du widget contenant le sinformations des a\u00e9roports</p>\n", "bases": "PyQt6.QtWidgets.QWidget"}, {"fullname": "AirPlainCompanyInfoWidget.AirPlainCompanyInfoWidget.__init__", "modulename": "AirPlainCompanyInfoWidget", "qualname": "AirPlainCompanyInfoWidget.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bdd</span><span class=\"p\">:</span> <span class=\"n\">BddControler</span><span class=\"o\">.</span><span class=\"n\">BddControler</span></span>)</span>"}, {"fullname": "AirPlainCompanyInfoWidget.AirPlainCompanyInfoWidget.setInfosByCompany", "modulename": "AirPlainCompanyInfoWidget", "qualname": "AirPlainCompanyInfoWidget.setInfosByCompany", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">company</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "AirPlainCompanyWidget", "modulename": "AirPlainCompanyWidget", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "AirPlainCompanyWidget.AirPlainCompanyWidget", "modulename": "AirPlainCompanyWidget", "qualname": "AirPlainCompanyWidget", "kind": "class", "doc": "<p>QWidget(parent: typing.Optional[QWidget] = None, flags: Qt.WindowType = Qt.WindowFlags())</p>\n", "bases": "PyQt6.QtWidgets.QWidget"}, {"fullname": "AirPlainCompanyWidget.AirPlainCompanyWidget.__init__", "modulename": "AirPlainCompanyWidget", "qualname": "AirPlainCompanyWidget.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bdd</span><span class=\"p\">:</span> <span class=\"n\">BddControler</span><span class=\"o\">.</span><span class=\"n\">BddControler</span></span>)</span>"}, {"fullname": "AirPlainCompanyWidget.AirPlainCompanyWidget.setCompanyList", "modulename": "AirPlainCompanyWidget", "qualname": "AirPlainCompanyWidget.setCompanyList", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AirPlainCompanyWidget.AirPlainCompanyWidget.setInfosByCompany", "modulename": "AirPlainCompanyWidget", "qualname": "AirPlainCompanyWidget.setInfosByCompany", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">company</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AirPlainCompanyWidget.AirPlainCompanyWidget.view_data_co2", "modulename": "AirPlainCompanyWidget", "qualname": "AirPlainCompanyWidget.view_data_co2", "kind": "function", "doc": "<p>Fonction de cr\u00e9ation du graphique pour le co2</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AirportInfoWidget", "modulename": "AirportInfoWidget", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "AirportInfoWidget.AirportInfoWidget", "modulename": "AirportInfoWidget", "qualname": "AirportInfoWidget", "kind": "class", "doc": "<p>Cr\u00e9ation du widget contenant le sinformations des a\u00e9roports</p>\n", "bases": "PyQt6.QtWidgets.QWidget"}, {"fullname": "AirportInfoWidget.AirportInfoWidget.__init__", "modulename": "AirportInfoWidget", "qualname": "AirportInfoWidget.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bdd</span><span class=\"p\">:</span> <span class=\"n\">BddControler</span><span class=\"o\">.</span><span class=\"n\">BddControler</span></span>)</span>"}, {"fullname": "AirportInfoWidget.AirportInfoWidget.setInfoByAirport", "modulename": "AirportInfoWidget", "qualname": "AirportInfoWidget.setInfoByAirport", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">airport</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "AirportListWidget", "modulename": "AirportListWidget", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "AirportListWidget.AirportListWidget", "modulename": "AirportListWidget", "qualname": "AirportListWidget", "kind": "class", "doc": "<p>QWidget(parent: typing.Optional[QWidget] = None, flags: Qt.WindowType = Qt.WindowFlags())</p>\n", "bases": "PyQt6.QtWidgets.QWidget"}, {"fullname": "AirportListWidget.AirportListWidget.__init__", "modulename": "AirportListWidget", "qualname": "AirportListWidget.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">bdd</span><span class=\"p\">:</span> <span class=\"n\">BddControler</span><span class=\"o\">.</span><span class=\"n\">BddControler</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Liste des aeroports&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">placeHolder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Rechercher un aeroport&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">showAllAirport</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "AirportListWidget.AirportListWidget.airportClicked", "modulename": "AirportListWidget", "qualname": "AirportListWidget.airportClicked", "kind": "function", "doc": "<p>pyqtSignal(*types, name: str = ..., revision: int = ..., arguments: Sequence = ...) -> PYQT_SIGNAL</p>\n\n<p>types is normally a sequence of individual types.  Each type is either a\ntype object or a string that is the name of a C++ type.  Alternatively\neach type could itself be a sequence of types each describing a different\noverloaded signal.\nname is the optional C++ name of the signal.  If it is not specified then\nthe name of the class attribute that is bound to the signal is used.\nrevision is the optional revision of the signal that is exported to QML.\nIf it is not specified then 0 is used.\narguments is the optional sequence of the names of the signal's arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AirportListWidget.AirportListWidget.airportSearched", "modulename": "AirportListWidget", "qualname": "AirportListWidget.airportSearched", "kind": "function", "doc": "<p>Cr\u00e9ation du widget contenant la liste des a\u00e9roports</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AirportListWidget.AirportListWidget.airportClickedFunc", "modulename": "AirportListWidget", "qualname": "AirportListWidget.airportClickedFunc", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">PyQt6</span><span class=\"o\">.</span><span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QListWidget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "AirportListWidget.AirportListWidget.airportSearchedFunc", "modulename": "AirportListWidget", "qualname": "AirportListWidget.airportSearchedFunc", "kind": "function", "doc": "<p>Emmit the lineEdit text when changed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "AirportListWidget.AirportListWidget.setAirportByCountry", "modulename": "AirportListWidget", "qualname": "AirportListWidget.setAirportByCountry", "kind": "function", "doc": "<p>D\u00e9fini la liste des aeroports en fonction du pays</p>\n\n<p>Args:\n    country (str): Nom du pays</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">country</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "AirportListWidget.AirportListWidget.setAirportList", "modulename": "AirportListWidget", "qualname": "AirportListWidget.setAirportList", "kind": "function", "doc": "<p>D\u00e9fini la liste des aeroports</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "AirportListWidget.AirportListWidget.getList", "modulename": "AirportListWidget", "qualname": "AirportListWidget.getList", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AirportListWidget.AirportSrcListWidget", "modulename": "AirportListWidget", "qualname": "AirportSrcListWidget", "kind": "class", "doc": "<p>QWidget(parent: typing.Optional[QWidget] = None, flags: Qt.WindowType = Qt.WindowFlags())</p>\n", "bases": "AirportListWidget"}, {"fullname": "AirportListWidget.AirportSrcListWidget.__init__", "modulename": "AirportListWidget", "qualname": "AirportSrcListWidget.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">bdd</span><span class=\"p\">:</span> <span class=\"n\">BddControler</span><span class=\"o\">.</span><span class=\"n\">BddControler</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Liste des aeroports&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">placeHolder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Rechercher un aeroport&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">showAllAirport</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "AirportListWidget.AirportSrcListWidget.updateAirportList", "modulename": "AirportListWidget", "qualname": "AirportSrcListWidget.updateAirportList", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">country</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "AirportListWidget.AirportDestListWidget", "modulename": "AirportListWidget", "qualname": "AirportDestListWidget", "kind": "class", "doc": "<p>QWidget(parent: typing.Optional[QWidget] = None, flags: Qt.WindowType = Qt.WindowFlags())</p>\n", "bases": "AirportSrcListWidget"}, {"fullname": "AirportListWidget.AirportDestListWidget.__init__", "modulename": "AirportListWidget", "qualname": "AirportDestListWidget.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">bdd</span><span class=\"p\">:</span> <span class=\"n\">BddControler</span><span class=\"o\">.</span><span class=\"n\">BddControler</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Liste des aeroports&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">placeHolder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Rechercher un aeroport&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">showAllAirport</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "AirportListWidget.AirportDestListWidget.updateAirportDestList", "modulename": "AirportListWidget", "qualname": "AirportDestListWidget.updateAirportDestList", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">country_dest</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">airport_src</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler", "modulename": "BddControler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "BddControler.BddControler", "modulename": "BddControler", "qualname": "BddControler", "kind": "class", "doc": "<p>Classe Bdd</p>\n\n<p>Args:\n    QWidget : H\u00e9rite de la classe QWidget</p>\n", "bases": "PyQt6.QtWidgets.QWidget"}, {"fullname": "BddControler.BddControler.getPlanes", "modulename": "BddControler", "qualname": "BddControler.getPlanes", "kind": "function", "doc": "<p>R\u00e9cup\u00e8re la liste des avions</p>\n\n<p>Returns:\n    list: Une liste d'avions (TODO)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getCountry", "modulename": "BddControler", "qualname": "BddControler.getCountry", "kind": "function", "doc": "<p>Retourne la liste des pays</p>\n\n<p>Args:\n    text (str): Nom d'un pays 'pour de la recherche' </p>\n\n<p>Returns:\n    list: Une liste de noms de pays</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getInfoByAirport", "modulename": "BddControler", "qualname": "BddControler.getInfoByAirport", "kind": "function", "doc": "<p>Retourne la liste des infos d'un aeroport</p>\n\n<p>Args:\n    airport (str): nom de l'aeroport</p>\n\n<p>Returns:\n    list: Une liste d'informations sur un aeroport</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">airport</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getPositionAeroportOfCountry", "modulename": "BddControler", "qualname": "BddControler.getPositionAeroportOfCountry", "kind": "function", "doc": "<p>Retourne la position des aeroports d'un pays</p>\n\n<p>Args:\n    country (str): nom d'un pays</p>\n\n<p>Returns:\n    list: Une liste de position d'aeroport</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">country</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getPositionAeroport", "modulename": "BddControler", "qualname": "BddControler.getPositionAeroport", "kind": "function", "doc": "<p>Retourne une liste de position d'un aeroport</p>\n\n<p>Args:\n    airport (str): nom d'un aeroport</p>\n\n<p>Returns:\n    list: Une liste de position d'un aeroport</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">airport</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getAirFrancePlaneSeats", "modulename": "BddControler", "qualname": "BddControler.getAirFrancePlaneSeats", "kind": "function", "doc": "<p>Retourne la liste avec le nom des avions et le nombre de sieges</p>\n\n<p>Returns:\n    list: Une liste avec le nom des avions et le nombre de sieges</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getAirportByCountry", "modulename": "BddControler", "qualname": "BddControler.getAirportByCountry", "kind": "function", "doc": "<p>Retourne les aeroports</p>\n\n<p>Args:\n    country (str): Nom d'un pays\n    airport (str) : Nom d'un aeroport 'pour la fonction de recherche'</p>\n\n<p>Returns:\n    list: Une liste d'aeroport</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">country</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">airport</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getAirports", "modulename": "BddControler", "qualname": "BddControler.getAirports", "kind": "function", "doc": "<p>Retourne les aeroports</p>\n\n<p>Args:\n    airport (str) : Nom d'un aeroport 'pour la fonction de recherche'</p>\n\n<p>Returns:\n    list: Une liste d'aeroport</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">airport</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getNbPassengerByAirport", "modulename": "BddControler", "qualname": "BddControler.getNbPassengerByAirport", "kind": "function", "doc": "<p>Retourne le nombre de passager par aeroport</p>\n\n<p>Args:\n    country (str): Nom d'un pays</p>\n\n<p>Returns:\n    list: Une liste de nombre de passager par aeroport</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">country</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getMostUseAirport", "modulename": "BddControler", "qualname": "BddControler.getMostUseAirport", "kind": "function", "doc": "<p>Retourne les aeroports les plus fr\u00e9quent\u00e9s dans un pays</p>\n\n<p>Args:\n    country (str): Nom d'un pays</p>\n\n<p>Returns:\n    list: Une liste d'aeroport</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">country</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getTotalCo2ByCountry", "modulename": "BddControler", "qualname": "BddControler.getTotalCo2ByCountry", "kind": "function", "doc": "<p>Retourne le total de co2 par pays</p>\n\n<p>Returns:\n    list: Une liste de total de co2 par pays</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getInfoAirportRoute", "modulename": "BddControler", "qualname": "BddControler.getInfoAirportRoute", "kind": "function", "doc": "<p>Retourne les informations d'un aeroport</p>\n\n<p>Args:\n    airport (str): Nom d'un aeroport</p>\n\n<p>Returns:\n    list: Une liste d'informations d'un aeroport</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">airport</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getInfoRouteByAirport", "modulename": "BddControler", "qualname": "BddControler.getInfoRouteByAirport", "kind": "function", "doc": "<p>Retourne les informations des routes (distance en km et \u00e9mission de co2)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">src_airport</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dest_airport</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getRouteFromAirportToCountry", "modulename": "BddControler", "qualname": "BddControler.getRouteFromAirportToCountry", "kind": "function", "doc": "<p>Retourne la liste des pays disponible en prenant un aeroport</p>\n\n<p>Args:\n    airport (str): a\u00e9roport de d\u00e9part</p>\n\n<p>Returns:\n    (list): une liste contenant les pays disponibles</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">airport</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getTotalCo2ByEurope", "modulename": "BddControler", "qualname": "BddControler.getTotalCo2ByEurope", "kind": "function", "doc": "<p>Retourne le total de co2 des pays d'europe</p>\n\n<p>Returns:\n    list: Une liste de total de co2 en europe</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getAirportOnlyWithRoute", "modulename": "BddControler", "qualname": "BddControler.getAirportOnlyWithRoute", "kind": "function", "doc": "<p>Retourne un liste d'aeroport avec des routes d'un pays</p>\n\n<p>Args:\n    country (str): pays d'origine de l'aeroport</p>\n\n<p>Returns:\n    list: la liste de a\u00e9roport qui ont des routes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">country</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getAirportDestWithRoute", "modulename": "BddControler", "qualname": "BddControler.getAirportDestWithRoute", "kind": "function", "doc": "<p>Retourne la liste des a\u00e9roports qui on une route en commun avec le pays de destination et l'a\u00e9roport de d\u00e9part</p>\n\n<p>Args:\n    country_dest (str): pays de destination\n    airport_src (str): a\u00e9roport de d\u00e9part</p>\n\n<p>Returns:\n    list: les a\u00e9roports qui on une route en commun avec le pays de destination et l'a\u00e9roport de d\u00e9part</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">country_dest</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">airport_src</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getCompanyList", "modulename": "BddControler", "qualname": "BddControler.getCompanyList", "kind": "function", "doc": "<p>Retourne la liste des compagnies a\u00e9riennes</p>\n\n<p>Args:\n    active (str, optional): 'N' ou 'Y'. Defaults to '%'.</p>\n\n<p>Returns:\n    list: Une liste de compagnies a\u00e9riennes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">active</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;%&#39;</span>, </span><span class=\"param\"><span class=\"n\">isWorld</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getInfoByCompany", "modulename": "BddControler", "qualname": "BddControler.getInfoByCompany", "kind": "function", "doc": "<p>Retourne les informations d'une compagnie a\u00e9rienne</p>\n\n<p>Args:\n    company (str): Nom d'une compagnie a\u00e9rienne</p>\n\n<p>Returns:\n    list: Une liste d'informations d'une compagnie a\u00e9rienne</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">company</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getco2ByAirlineCompany_monde_asc", "modulename": "BddControler", "qualname": "BddControler.getco2ByAirlineCompany_monde_asc", "kind": "function", "doc": "<p>Retourne la liste des compagnies du monde dans l'ordre croissant d'\u00e9mission de co2</p>\n\n<p>Returns:\n    list: liste des \u00e9missions de co2</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getco2ByAirlineCompany_monde_desc", "modulename": "BddControler", "qualname": "BddControler.getco2ByAirlineCompany_monde_desc", "kind": "function", "doc": "<p>Retourne la liste des compagnies du monde dans l'ordre d\u00e9croissant d'\u00e9mission de co2</p>\n\n<p>Returns:\n    list: liste des \u00e9missions de co2</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getco2ByAirlineCompany_europe_asc", "modulename": "BddControler", "qualname": "BddControler.getco2ByAirlineCompany_europe_asc", "kind": "function", "doc": "<p>Retourne la liste des compagnies d'europe dans l'ordre croissant d'\u00e9mission de co2</p>\n\n<p>Returns:\n    list: liste des \u00e9missions de co2</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.getco2ByAirlineCompany_europe_desc", "modulename": "BddControler", "qualname": "BddControler.getco2ByAirlineCompany_europe_desc", "kind": "function", "doc": "<p>Retourne la liste des compagnies d'europe dans l'ordre d\u00e9croissant d'\u00e9mission de co2</p>\n\n<p>Returns:\n    list: liste des \u00e9missions de co2</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "BddControler.BddControler.closeConnection", "modulename": "BddControler", "qualname": "BddControler.closeConnection", "kind": "function", "doc": "<p>Ferme la connection avec la base de donn\u00e9es</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CompanyListWidget", "modulename": "CompanyListWidget", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "CompanyListWidget.CompanyListWidget", "modulename": "CompanyListWidget", "qualname": "CompanyListWidget", "kind": "class", "doc": "<p>QListWidget(parent: typing.Optional[QWidget] = None)</p>\n", "bases": "PyQt6.QtWidgets.QListWidget"}, {"fullname": "CompanyListWidget.CompanyListWidget.__init__", "modulename": "CompanyListWidget", "qualname": "CompanyListWidget.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bdd</span><span class=\"p\">:</span> <span class=\"n\">BddControler</span><span class=\"o\">.</span><span class=\"n\">BddControler</span></span>)</span>"}, {"fullname": "CompanyListWidget.CompanyListWidget.qSelectedCompany", "modulename": "CompanyListWidget", "qualname": "CompanyListWidget.qSelectedCompany", "kind": "function", "doc": "<p>pyqtSignal(*types, name: str = ..., revision: int = ..., arguments: Sequence = ...) -> PYQT_SIGNAL</p>\n\n<p>types is normally a sequence of individual types.  Each type is either a\ntype object or a string that is the name of a C++ type.  Alternatively\neach type could itself be a sequence of types each describing a different\noverloaded signal.\nname is the optional C++ name of the signal.  If it is not specified then\nthe name of the class attribute that is bound to the signal is used.\nrevision is the optional revision of the signal that is exported to QML.\nIf it is not specified then 0 is used.\narguments is the optional sequence of the names of the signal's arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CompanyListWidget.CompanyListWidget.setCompanyList", "modulename": "CompanyListWidget", "qualname": "CompanyListWidget.setCompanyList", "kind": "function", "doc": "<p>D\u00e9fini la liste des compagnies a\u00e9riennes dans le widget</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">active</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;%&#39;</span>, </span><span class=\"param\"><span class=\"n\">isWorld</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CompanyListWidget.CompanyListWidget.qSelectedCompanyFunc", "modulename": "CompanyListWidget", "qualname": "CompanyListWidget.qSelectedCompanyFunc", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CountryListWidget", "modulename": "CountryListWidget", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "CountryListWidget.CountrySrcListWidget", "modulename": "CountryListWidget", "qualname": "CountrySrcListWidget", "kind": "class", "doc": "<p>QWidget(parent: typing.Optional[QWidget] = None, flags: Qt.WindowType = Qt.WindowFlags())</p>\n", "bases": "PyQt6.QtWidgets.QWidget"}, {"fullname": "CountryListWidget.CountrySrcListWidget.__init__", "modulename": "CountryListWidget", "qualname": "CountrySrcListWidget.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bdd</span><span class=\"p\">:</span> <span class=\"n\">BddControler</span><span class=\"o\">.</span><span class=\"n\">BddControler</span></span>)</span>"}, {"fullname": "CountryListWidget.CountrySrcListWidget.countryClicked", "modulename": "CountryListWidget", "qualname": "CountrySrcListWidget.countryClicked", "kind": "function", "doc": "<p>pyqtSignal(*types, name: str = ..., revision: int = ..., arguments: Sequence = ...) -> PYQT_SIGNAL</p>\n\n<p>types is normally a sequence of individual types.  Each type is either a\ntype object or a string that is the name of a C++ type.  Alternatively\neach type could itself be a sequence of types each describing a different\noverloaded signal.\nname is the optional C++ name of the signal.  If it is not specified then\nthe name of the class attribute that is bound to the signal is used.\nrevision is the optional revision of the signal that is exported to QML.\nIf it is not specified then 0 is used.\narguments is the optional sequence of the names of the signal's arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CountryListWidget.CountrySrcListWidget.countryClickedFunc", "modulename": "CountryListWidget", "qualname": "CountrySrcListWidget.countryClickedFunc", "kind": "function", "doc": "<p>Fonction qui emmet le texte du pays dans un signal</p>\n\n<p>Args:\n    item (QListWidgetItem): Element de QListWidget</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">PyQt6</span><span class=\"o\">.</span><span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QListWidgetItem</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CountryListWidget.CountrySrcListWidget.getCountryClickedText", "modulename": "CountryListWidget", "qualname": "CountrySrcListWidget.getCountryClickedText", "kind": "function", "doc": "<p>Fonction qui retourne le texte \u00e9mis par le signal countryClicked.</p>\n\n<p>Returns:\n    str: Texte \u00e9mis par le signal countryClicked.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "CountryListWidget.CountrySrcListWidget.addCountryList", "modulename": "CountryListWidget", "qualname": "CountrySrcListWidget.addCountryList", "kind": "function", "doc": "<p>Fonction qui ajoute la liste des pays dans QListWidget</p>\n\n<p>Args:\n    countries (list, optional): Liste des pays \u00e0 ajouter. \n                           Si None, r\u00e9cup\u00e8re la liste des pays depuis la base de donn\u00e9es. \n                           Par d\u00e9faut None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">countries</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CountryListWidget.CountrySrcListWidget.clearCountryList", "modulename": "CountryListWidget", "qualname": "CountrySrcListWidget.clearCountryList", "kind": "function", "doc": "<p>Fonction qui vide la liste des pays dans QListWidget</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CountryListWidget.CountrySrcListWidget.getList", "modulename": "CountryListWidget", "qualname": "CountrySrcListWidget.getList", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CountryListWidget.CountryDestListWidget", "modulename": "CountryListWidget", "qualname": "CountryDestListWidget", "kind": "class", "doc": "<p>QWidget(parent: typing.Optional[QWidget] = None, flags: Qt.WindowType = Qt.WindowFlags())</p>\n", "bases": "CountrySrcListWidget"}, {"fullname": "CountryListWidget.CountryDestListWidget.__init__", "modulename": "CountryListWidget", "qualname": "CountryDestListWidget.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bdd</span><span class=\"p\">:</span> <span class=\"n\">BddControler</span><span class=\"o\">.</span><span class=\"n\">BddControler</span></span>)</span>"}, {"fullname": "CountryListWidget.CountryDestListWidget.updateCountryList", "modulename": "CountryListWidget", "qualname": "CountryDestListWidget.updateCountryList", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">countries</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "InfosCountryAndAirport", "modulename": "InfosCountryAndAirport", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "InfosCountryAndAirport.InfosCountryAndAirport", "modulename": "InfosCountryAndAirport", "qualname": "InfosCountryAndAirport", "kind": "class", "doc": "<p>QWidget(parent: typing.Optional[QWidget] = None, flags: Qt.WindowType = Qt.WindowFlags())</p>\n", "bases": "PyQt6.QtWidgets.QWidget"}, {"fullname": "InfosCountryAndAirport.InfosCountryAndAirport.__init__", "modulename": "InfosCountryAndAirport", "qualname": "InfosCountryAndAirport.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bdd</span><span class=\"p\">:</span> <span class=\"n\">BddControler</span><span class=\"o\">.</span><span class=\"n\">BddControler</span></span>)</span>"}, {"fullname": "InfosCountryAndAirport.InfosCountryAndAirport.setSelectedCountry", "modulename": "InfosCountryAndAirport", "qualname": "InfosCountryAndAirport.setSelectedCountry", "kind": "function", "doc": "<p>D\u00e9fini le pays pour la liste des aeroports et pour la viewdata</p>\n\n<p>Args:\n    country (str): Nom du pays</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">country</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "InfosCountryAndAirport.InfosCountryAndAirport.setSelectedAirport", "modulename": "InfosCountryAndAirport", "qualname": "InfosCountryAndAirport.setSelectedAirport", "kind": "function", "doc": "<p>D\u00e9fini l'aeroport selectionne pour la viewdata et pour les informations de l'aeroport</p>\n\n<p>Args:\n    airport (str): aeroport</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">airport</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "InfosCountryAndAirport.InfosCountryAndAirport.setAirportBySearch", "modulename": "InfosCountryAndAirport", "qualname": "InfosCountryAndAirport.setAirportBySearch", "kind": "function", "doc": "<p>D\u00e9fini la liste des pays lors du changement de l'entr\u00e9e utilisateur</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "InfosCountryAndAirport.InfosCountryAndAirport.refreshViewData", "modulename": "InfosCountryAndAirport", "qualname": "InfosCountryAndAirport.refreshViewData", "kind": "function", "doc": "<p>Rafraichi les donn\u00e9es de la view data passenger</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">selectedView</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Main", "modulename": "Main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Main.win", "modulename": "Main", "qualname": "win", "kind": "class", "doc": "<p>Cr\u00e9er la fen\u00eatre principale</p>\n", "bases": "PyQt6.QtWidgets.QTabWidget"}, {"fullname": "Main.win.closeConnection", "modulename": "Main", "qualname": "win.closeConnection", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "RouteWidget", "modulename": "RouteWidget", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "RouteWidget.RouteWidget", "modulename": "RouteWidget", "qualname": "RouteWidget", "kind": "class", "doc": "<p>QWidget(parent: typing.Optional[QWidget] = None, flags: Qt.WindowType = Qt.WindowFlags())</p>\n", "bases": "PyQt6.QtWidgets.QWidget"}, {"fullname": "RouteWidget.RouteWidget.__init__", "modulename": "RouteWidget", "qualname": "RouteWidget.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bdd</span><span class=\"p\">:</span> <span class=\"n\">BddControler</span><span class=\"o\">.</span><span class=\"n\">BddControler</span></span>)</span>"}, {"fullname": "RouteWidget.RouteWidget.setSelectedSrcCountry", "modulename": "RouteWidget", "qualname": "RouteWidget.setSelectedSrcCountry", "kind": "function", "doc": "<p>D\u00e9fini le pays pour la liste des aeroports et pour la viewdata</p>\n\n<p>Args:\n    country (str): Nom du pays</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">country</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "RouteWidget.RouteWidget.setSelectedDestCountry", "modulename": "RouteWidget", "qualname": "RouteWidget.setSelectedDestCountry", "kind": "function", "doc": "<p>D\u00e9fini le pays pour la liste des aeroports et pour la viewdata</p>\n\n<p>Args:\n    country (str): Nom du pays</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">country</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "RouteWidget.RouteWidget.setSrcAirport", "modulename": "RouteWidget", "qualname": "RouteWidget.setSrcAirport", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">airport</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "RouteWidget.RouteWidget.setDestAirport", "modulename": "RouteWidget", "qualname": "RouteWidget.setDestAirport", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">airport</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "RouteWidget.RouteWidget.updateRouteInfo", "modulename": "RouteWidget", "qualname": "RouteWidget.updateRouteInfo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "RouteWidget.RouteWidget.setSrcAirportList", "modulename": "RouteWidget", "qualname": "RouteWidget.setSrcAirportList", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "RouteWidget.RouteWidget.setDestAirportList", "modulename": "RouteWidget", "qualname": "RouteWidget.setDestAirportList", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "ViewDataCo2Widget", "modulename": "ViewDataCo2Widget", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "ViewDataCo2Widget.ViewDataCo2Widget", "modulename": "ViewDataCo2Widget", "qualname": "ViewDataCo2Widget", "kind": "class", "doc": "<p>QWidget(parent: typing.Optional[QWidget] = None, flags: Qt.WindowType = Qt.WindowFlags())</p>\n", "bases": "PyQt6.QtWidgets.QWidget"}, {"fullname": "ViewDataCo2Widget.ViewDataCo2Widget.__init__", "modulename": "ViewDataCo2Widget", "qualname": "ViewDataCo2Widget.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bdd</span><span class=\"p\">:</span> <span class=\"n\">BddControler</span><span class=\"o\">.</span><span class=\"n\">BddControler</span></span>)</span>"}, {"fullname": "ViewDataCo2Widget.ViewDataCo2Widget.view_data_co2_country", "modulename": "ViewDataCo2Widget", "qualname": "ViewDataCo2Widget.view_data_co2_country", "kind": "function", "doc": "<p>Fonction qui affiche les donn\u00e9es de CO2 dans un graphique</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "ViewDataCo2Widget.ViewDataCo2Widget.view_data_co2_europe", "modulename": "ViewDataCo2Widget", "qualname": "ViewDataCo2Widget.view_data_co2_europe", "kind": "function", "doc": "<p>Fonction qui affiche les donn\u00e9es de CO2 dans un graphique</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "ViewDataRouteWidget", "modulename": "ViewDataRouteWidget", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "ViewDataRouteWidget.ViewDataRouteWidget", "modulename": "ViewDataRouteWidget", "qualname": "ViewDataRouteWidget", "kind": "class", "doc": "<p>Classe repr\u00e9sentant un widget contenant une data visualisation diagramme en barre</p>\n\n<p>Args:\n    QWidget (QWidget): h\u00e9rite de QWidget</p>\n", "bases": "PyQt6.QtWidgets.QWidget"}, {"fullname": "ViewDataRouteWidget.ViewDataRouteWidget.__init__", "modulename": "ViewDataRouteWidget", "qualname": "ViewDataRouteWidget.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bdd</span><span class=\"p\">:</span> <span class=\"n\">BddControler</span><span class=\"o\">.</span><span class=\"n\">BddControler</span>, </span><span class=\"param\"><span class=\"n\">depart</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">destination</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "ViewDataRouteWidget.ViewDataRouteWidget.view_data_route", "modulename": "ViewDataRouteWidget", "qualname": "ViewDataRouteWidget.view_data_route", "kind": "function", "doc": "<p>M\u00e9thode permettant d'afficher une data visualisation de la route entre deux a\u00e9roports</p>\n\n<p>Args:\n    depart (str): a\u00e9roport de d\u00e9part\n    destination (str): a\u00e9roport d'arriv\u00e9e</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">depart</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">destination</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "ViewDataRouteWidget.ViewDataRouteWidget.clear", "modulename": "ViewDataRouteWidget", "qualname": "ViewDataRouteWidget.clear", "kind": "function", "doc": "<p>Supprime le widget du layout</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "ViewDataWidget", "modulename": "ViewDataWidget", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "ViewDataWidget.ViewDataWidget", "modulename": "ViewDataWidget", "qualname": "ViewDataWidget", "kind": "class", "doc": "<p>Classe repr\u00e9sentant un widget contenant une data visualisation diagramme en barre</p>\n\n<p>Args:\n    QWidget (QWidget): h\u00e9rite de QWidget</p>\n", "bases": "PyQt6.QtWidgets.QWidget"}, {"fullname": "ViewDataWidget.ViewDataWidget.__init__", "modulename": "ViewDataWidget", "qualname": "ViewDataWidget.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bdd</span><span class=\"p\">:</span> <span class=\"n\">BddControler</span><span class=\"o\">.</span><span class=\"n\">BddControler</span></span>)</span>"}, {"fullname": "ViewDataWidget.ViewDataWidget.qRadioBtnSignal", "modulename": "ViewDataWidget", "qualname": "ViewDataWidget.qRadioBtnSignal", "kind": "function", "doc": "<p>pyqtSignal(*types, name: str = ..., revision: int = ..., arguments: Sequence = ...) -> PYQT_SIGNAL</p>\n\n<p>types is normally a sequence of individual types.  Each type is either a\ntype object or a string that is the name of a C++ type.  Alternatively\neach type could itself be a sequence of types each describing a different\noverloaded signal.\nname is the optional C++ name of the signal.  If it is not specified then\nthe name of the class attribute that is bound to the signal is used.\nrevision is the optional revision of the signal that is exported to QML.\nIf it is not specified then 0 is used.\narguments is the optional sequence of the names of the signal's arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ViewDataWidget.ViewDataWidget.view_data_bar_nb_passenger_transport", "modulename": "ViewDataWidget", "qualname": "ViewDataWidget.view_data_bar_nb_passenger_transport", "kind": "function", "doc": "<p>M\u00e9thode permettant de cr\u00e9er une data visualisation correspondant au nombre de personne transport\u00e9 par aeroport</p>\n\n<p>Args:\n    country (str): Le pays dont on veux connaitre le r\u00e9sultat de la requ\u00eate</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">country</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "ViewDataWidget.ViewDataWidget.view_data_bar_airport_frequency", "modulename": "ViewDataWidget", "qualname": "ViewDataWidget.view_data_bar_airport_frequency", "kind": "function", "doc": "<p>M\u00e9thode permettant d'afficher une data visualisation de la fr\u00e9quence d'utilisation des aeroport par pays</p>\n\n<p>Args:\n    country (str): Le pays dont on veux connaitre le r\u00e9sultat de la requ\u00eate</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">country</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "ViewDataWidget.ViewDataWidget.view_data_country", "modulename": "ViewDataWidget", "qualname": "ViewDataWidget.view_data_country", "kind": "function", "doc": "<p>M\u00e9thode permettant d'afficher une data visualisation de tout les a\u00e9roports d'un pays</p>\n\n<p>Args:\n    country (str): le pays dont on veut connaitre les a\u00e9roports</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">country</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "ViewDataWidget.ViewDataWidget.view_data_airport", "modulename": "ViewDataWidget", "qualname": "ViewDataWidget.view_data_airport", "kind": "function", "doc": "<p>M\u00e9thode permettant d'afficher une data visualisation sous forme de map monde repr\u00e9sentant un a\u00e9roport d'un pays</p>\n\n<p>Args:\n    airport (str): l'aeroport dont on veut connaitre la position</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">airport</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "ViewDataWidget.ViewDataWidget.refresh", "modulename": "ViewDataWidget", "qualname": "ViewDataWidget.refresh", "kind": "function", "doc": "<p>Rafraichi la vue en fonction du pays et retourne le num\u00e9ro de vue</p>\n\n<p>Args:\n    country (str): country. Defaults to \"\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">country</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "ViewDataWidget.ViewDataWidget.qRadioBbtnSignalFunc", "modulename": "ViewDataWidget", "qualname": "ViewDataWidget.qRadioBbtnSignalFunc", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "ViewDataWidget.ViewDataWidget.clear", "modulename": "ViewDataWidget", "qualname": "ViewDataWidget.clear", "kind": "function", "doc": "<p>Supprime le widget du layout</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();